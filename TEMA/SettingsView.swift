import SwiftUI
import PassKit

struct SettingsView: View {
    @EnvironmentObject var appData: AppData
    @Environment(\.dismiss) var dismiss
    
    // √âtats pour g√©rer le changement de nom
    @State private var isChangingName = false
    @State private var newName = ""
    @State private var showNameChangeAlert = false
    @State private var nameChangeMessage = ""
    // √âtat pour l'erreur du Pass Apple Wallet
    @State private var showPassKitError = false
    @State private var passKitErrorMessage = ""
    // √âtat pour afficher/masquer la sheet du pass wallet
    @State private var showPassSheet = false
    @State private var walletPass: PKPass? = nil

    var body: some View {
        VStack(spacing: 20) {
            // Section du profil
            VStack(alignment: .leading, spacing: 8) {
                Text("Profil")
                    .font(.headline)
                    .foregroundColor(.primary)
                    .padding(.horizontal)
                
                // Bouton pour changer le nom d'utilisateur
                Button(action: {
                    newName = appData.currentUser?.name ?? ""
                    isChangingName = true
                }) {
                    HStack {
                        Image(systemName: "person.text.rectangle")
                            .foregroundColor(.blue)
                        
                        Text("Changer le nom d'utilisateur")
                            .foregroundColor(.primary)
                        
                        Spacer()
                        
                        Image(systemName: "chevron.right")
                            .foregroundColor(.gray)
                            .font(.caption)
                    }
                    .padding()
                    .background(Color(UIColor.secondarySystemBackground))
                    .cornerRadius(10)
                }
                .padding(.horizontal)
                
                // Bouton pour acc√©der au tutoriel Instagram
                NavigationLink(destination: InstagramDataTutorialView()) {
                    HStack {
                        Image(systemName: "square.and.arrow.down")
                            .foregroundColor(.purple)

                        Text("Comment t√©l√©charger mes donn√©es Instagram")
                            .foregroundColor(.primary)

                        Spacer()

                        Image(systemName: "chevron.right")
                            .foregroundColor(.gray)
                            .font(.caption)
                    }
                    .padding()
                    .background(Color(UIColor.secondarySystemBackground))
                    .cornerRadius(10)
                }
                .padding(.horizontal)
                
                // Nouveau bouton pour Apple Wallet - Pr√©pare le pass et ouvre la sheet
                Button(action: {
                    prepareAndShowPass()
                }) {
                    HStack {
                        Image(systemName: "wallet.pass")
                            .foregroundColor(.orange)
                        
                        Text("Ajouter ma carte TEMA")
                            .foregroundColor(.primary)
                        
                        Spacer()
                        
                        Image(systemName: "chevron.right")
                            .foregroundColor(.gray)
                            .font(.caption)
                    }
                    .padding()
                    .background(Color(UIColor.secondarySystemBackground))
                    .cornerRadius(10)
                }
                .padding(.horizontal)
            }
            
            Spacer()

            Button(action: {
                appData.signOut()
            }) {
                Text("Se d√©connecter")
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.red)
                    .cornerRadius(8)
            }
            .padding(.horizontal, 20)
            .padding(.bottom, 50)
        }
        .padding(.top, 20)
        // Titre et configuration par d√©faut de la barre
        .navigationTitle("Param√®tres")
        .navigationBarTitleDisplayMode(.inline)
        // Affiche une alerte pour confirmer le changement de nom
        .alert("R√©sultat", isPresented: $showNameChangeAlert) {
            Button("OK", role: .cancel) { }
        } message: {
            Text(nameChangeMessage)
        }
        // Affiche une alerte pour les erreurs PassKit
        .alert("Erreur Apple Wallet", isPresented: $showPassKitError) {
            Button("OK", role: .cancel) { }
        } message: {
            Text(passKitErrorMessage)
        }
        // Affiche une sheet pour changer le nom
        .sheet(isPresented: $isChangingName) {
            NavigationView {
                VStack(spacing: 20) {
                    Text("Changer votre nom d'utilisateur")
                        .font(.headline)
                        .padding(.top, 20)
                    
                    TextField("Nouveau nom", text: $newName)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .padding(.horizontal, 20)
                        .autocapitalization(.words)
                    
                    Spacer()
                }
                .navigationBarTitle("Changer de nom", displayMode: .inline)
                .navigationBarItems(
                    leading: Button("Annuler") {
                        isChangingName = false
                    },
                    trailing: Button("Enregistrer") {
                        updateUserName()
                    }
                    .disabled(newName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
                )
            }
        }
        // Affiche la sheet pour le pass avec possibilit√© de swipe down pour fermer
        .sheet(isPresented: $showPassSheet) {
            // Sheet ferm√©e
        } content: {
            if let pass = walletPass {
                PassKitSheetView(pass: pass, isPresented: $showPassSheet)
                    .edgesIgnoringSafeArea(.all)
            }
        }
    }
    
    // Fonction pour pr√©parer et afficher le pass
    private func prepareAndShowPass() {
        if let passURL = Bundle.main.url(forResource: "Paul", withExtension: "pkpass") {
            print("‚úÖ Fichier .pkpass trouv√©: \(passURL)")
            
            do {
                let passData = try Data(contentsOf: passURL)
                print("‚úÖ Donn√©es du pass charg√©es: \(passData.count) octets")
                
                // Cr√©er le pass et le stocker
                let pass = try PKPass(data: passData)
                print("‚úÖ Pass cr√©√© avec succ√®s")
                
                // Afficher dans notre sheet personnalis√©e
                walletPass = pass
                showPassSheet = true
                
            } catch {
                print("‚ùå Erreur: \(error)")
                passKitErrorMessage = "Erreur lors du chargement du pass: \(error.localizedDescription)"
                showPassKitError = true
            }
        } else {
            print("‚ùå Fichier Paul.pkpass non trouv√© dans le bundle")
            
            // Afficher les fichiers disponibles dans le bundle pour d√©boguer
            if let resourcePath = Bundle.main.resourcePath {
                let fileManager = FileManager.default
                do {
                    let contents = try fileManager.contentsOfDirectory(atPath: resourcePath)
                    print("üìÅ Fichiers dans le bundle:")
                    for item in contents {
                        print("   - \(item)")
                    }
                } catch {
                    print("‚ùå Erreur lors de la lecture du contenu du bundle: \(error)")
                }
            }
            
            passKitErrorMessage = "Le fichier .pkpass n'a pas √©t√© trouv√© dans l'application. Assurez-vous qu'il est correctement inclus dans le bundle."
            showPassKitError = true
        }
    }
    
    private func updateUserName() {
        // V√©rification du format du nom
        let trimmedName = newName.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedName.isEmpty {
            nameChangeMessage = "Le nom ne peut pas √™tre vide"
            showNameChangeAlert = true
            return
        }
        
        // S√©paration du nom complet en pr√©nom et nom
        let nameComponents = trimmedName.split(separator: " ", maxSplits: 1)
        let firstName = String(nameComponents.first ?? "")
        let lastName = nameComponents.count > 1 ? String(nameComponents[1]) : ""
        
        // Mise √† jour du nom de l'utilisateur avec un callback √† un seul param√®tre
        appData.updateUserName(firstName: firstName, lastName: lastName) { error in
            isChangingName = false
            
            if error == nil {
                nameChangeMessage = "Votre nom a √©t√© mis √† jour avec succ√®s"
            } else {
                nameChangeMessage = "Erreur lors de la mise √† jour du nom: \(error?.localizedDescription ?? "Inconnue")"
            }
            
            showNameChangeAlert = true
        }
    }
}

// Vue wrapper pour PKAddPassesViewController avec swipe pour fermer
struct PassKitSheetView: UIViewControllerRepresentable {
    let pass: PKPass
    @Binding var isPresented: Bool
    
    func makeUIViewController(context: Context) -> UIViewController {
        // Cr√©er le conteneur qui va h√©berger le PKAddPassesViewController
        let containerViewController = PassContainerViewController()
        containerViewController.pass = pass
        containerViewController.dismissHandler = {
            self.isPresented = false
        }
        return containerViewController
    }
    
    func updateUIViewController(_ uiViewController: UIViewController, context: Context) {
        // Pas besoin de mise √† jour
    }
    
    // Classe pour g√©rer le conteneur du pass avec swipe down
    class PassContainerViewController: UIViewController {
        var pass: PKPass?
        var passViewController: PKAddPassesViewController?
        var dismissHandler: (() -> Void)?
        
        override func viewDidLoad() {
            super.viewDidLoad()
            
            guard let pass = pass else { return }
            
            // Cr√©er le PKAddPassesViewController
            if PKAddPassesViewController.canAddPasses() {
                passViewController = PKAddPassesViewController(pass: pass)
                passViewController?.delegate = self
                
                // Ajouter le geste de swipe
                let swipeGesture = UIPanGestureRecognizer(target: self, action: #selector(handleSwipe(_:)))
                view.addGestureRecognizer(swipeGesture)
                
                // Pr√©senter le pass en tant que view controller enfant
                if let passVC = passViewController {
                    addChild(passVC)
                    view.addSubview(passVC.view)
                    passVC.view.frame = view.bounds
                    passVC.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
                    passVC.didMove(toParent: self)
                }
            }
        }
        
        @objc func handleSwipe(_ gesture: UIPanGestureRecognizer) {
            let translation = gesture.translation(in: view)
            let velocity = gesture.velocity(in: view)
            
            switch gesture.state {
            case .changed:
                // D√©placer la vue vers le bas en fonction du geste
                if translation.y > 0 {
                    passViewController?.view.transform = CGAffineTransform(translationX: 0, y: translation.y)
                }
                
            case .ended, .cancelled:
                // Si le swipe est assez rapide ou assez long vers le bas, fermer
                if translation.y > 150 || velocity.y > 500 {
                    UIView.animate(withDuration: 0.3, animations: {
                        self.passViewController?.view.transform = CGAffineTransform(translationX: 0, y: self.view.bounds.height)
                    }, completion: { _ in
                        self.dismissHandler?()
                    })
                } else {
                    // Sinon, revenir √† la position normale
                    UIView.animate(withDuration: 0.3) {
                        self.passViewController?.view.transform = .identity
                    }
                }
                
            default:
                break
            }
        }
    }
}

// Conformer √† PKAddPassesViewControllerDelegate
extension PassKitSheetView.PassContainerViewController: PKAddPassesViewControllerDelegate {
    func addPassesViewControllerDidFinish(_ controller: PKAddPassesViewController) {
        // Apple Wallet a termin√© l'ajout du pass
        dismissHandler?()
    }
}

struct SettingsView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            SettingsView().environmentObject(AppData())
        }
    }
}

struct InstagramDataTutorialView: View {
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                Group {
                    Text("üîê √âtape 1 ‚Äî Connectez-vous √† Instagram")
                        .font(.headline)
                    Text("1. Allez sur https://www.instagram.com\n2. Connectez-vous √† votre compte.")

                    Text("‚öôÔ∏è √âtape 2 ‚Äî Acc√©dez aux param√®tres")
                        .font(.headline)
                    Text("1. Cliquez sur votre photo de profil en haut √† droite.\n2. Cliquez sur Param√®tres > Votre activit√© > T√©l√©charger vos informations\n(ou acc√©dez directement √† https://www.instagram.com/download/request/)")

                    Text("üìß √âtape 3 ‚Äî Demandez vos donn√©es")
                        .font(.headline)
                    Text("1. Entrez l‚Äôadresse e-mail √† laquelle vous souhaitez recevoir le lien de t√©l√©chargement.\n2. Choisissez le format :\n   ‚Ä¢ HTML (lisible facilement dans un navigateur)\n   ‚Ä¢ JSON (plus adapt√© pour les d√©veloppeurs ou pour une int√©gration dans d‚Äôautres outils)\n3. Cliquez sur Suivant, entrez votre mot de passe, puis Demander un t√©l√©chargement.")
                }

                Group {
                    Text("üïê √âtape 4 ‚Äî Attendez l‚Äôe-mail")
                        .font(.headline)
                    Text("Instagram vous enverra un lien de t√©l√©chargement par e-mail (cela peut prendre quelques minutes √† quelques heures).")

                    Text("üìÇ √âtape 5 ‚Äî T√©l√©chargez le fichier ZIP")
                        .font(.headline)
                    Text("1. Une fois l‚Äôe-mail re√ßu, cliquez sur T√©l√©charger les informations.\n2. Vous serez redirig√© vers Instagram, connectez-vous de nouveau si n√©cessaire.\n3. Le fichier ZIP contiendra :\n   ‚Ä¢ Vos publications\n   ‚Ä¢ Vos messages\n   ‚Ä¢ Vos commentaires\n   ‚Ä¢ Vos likes\n   ‚Ä¢ Vos stories archiv√©es\n   ‚Ä¢ Et plus encore‚Ä¶")
                }
            }
            .padding()
        }
        .navigationTitle("T√©l√©charger mes donn√©es")
        .navigationBarTitleDisplayMode(.inline)
    }
}

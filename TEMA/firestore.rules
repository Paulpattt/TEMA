rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAvatarOwner(avatarData) {
      return isAuthenticated() && 
             avatarData.userId == request.auth.uid;
    }
    
    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Règles pour la collection posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (resource.data.authorId == request.auth.uid || 
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['likes', 'comments']));
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    // Règles pour la collection comments
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    // Règles pour la collection Avatars
    match /Avatars/{avatarId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || 
                    !resource.data.exists() || 
                    resource.data.isAvailable == true);
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Règles pour la collection wallet
    match /wallet/{walletId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && isOwner(walletId);
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Règles pour les photos de profil
    match /profile_pictures/{fileName} {
      allow read;
      // Autorise l'écriture seulement si le nom du fichier correspond à l'UID de l'utilisateur authentifié + ".png"
      allow write: if request.auth != null && fileName == request.auth.uid + ".png";
    }
    
    // Règles pour les posts
    match /posts/{postId} {
      allow read;  // Tout le monde peut lire les posts
      allow write: if request.auth != null;
    }
    
    // Règles pour les avatars
    match /Avatars/{fileName} {
      // Tout le monde peut lire les avatars
      allow read;
      
      // Seuls les admins peuvent ajouter/modifier/supprimer des avatars
      // Note: vous devrez ajouter un champ "admin: true" dans les custom claims de l'utilisateur
      // via Firebase Functions pour que cela fonctionne
      allow write: if request.auth != null && request.auth.token.admin == true;
      
      // Alternative si vous préférez restreindre à certains utilisateurs spécifiques sans custom claims
      // allow write: if request.auth != null && 
      //              (request.auth.uid == "votre_uid_admin1" || request.auth.uid == "votre_uid_admin2");
    }
  }
} 
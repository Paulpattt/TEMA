rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions utilitaires
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAvatarOwner(avatarData) {
      return isAuthenticated() && 
             avatarData.userId == request.auth.uid;
    }
    
    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Règles pour la collection posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (resource.data.authorId == request.auth.uid || 
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['likes', 'comments']));
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    // Règles pour la collection comments
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    // Règles pour la collection avatars
    match /avatars/{avatarId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                   (resource.data.userId == request.auth.uid || 
                    !resource.data.exists() || 
                    resource.data.isAvailable == true);
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Règles pour la collection wallet
    match /wallet/{walletId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && isOwner(walletId);
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 